require File.expand_path('../../../../config/environment', __FILE__)
require File.expand_path('../util', __FILE__)

grammar NamedConf
    rule file
        (space top_level_directive space)+ {
            attr_accessor :chroot_dir

            def named_conf
                view_keys = views.collect(&:key_name)
                str       = ''

                elements.each do |element|
                    next unless element.respond_to?(:top_level_directive)
                    top_level = element.top_level_directive

                    # skip zones and views
                    next if is_rule?(top_level, 'zone') ||
                            is_rule?(top_level, 'view') ||
                            is_rule?(top_level, 'key') && top_level.respond_to?(:key_name) && view_keys.include?(top_level.key_name.to_s)

                    str << top_level.text_value << "\n\n"
                end
                str
            end

            def views
                @views ||= get_views_recursively
            end

            def domains
                @domains ||= get_domains_recursively
            end

            def directory_option
                @directory_option ||= get_directory_option_recursively
            end

            private

            def is_rule?(node, rule_name)
                node.extension_modules.include?("NamedConf::#{rule_name.camelize}0".constantize)
            end

            def get_views_recursively(node = self, views = Array.new)
                views << node.view if node.respond_to?(:view)
                node.elements.each do |child|
                    get_views_recursively(child, views) unless child.terminal?
                end
                views
            end

            def get_domains_recursively(node = self, domains = Array.new)
                node.respond_to?(:view)   and return domains
                node.respond_to?(:domain) and domains << node.domain

                node.elements.each do |child|
                    get_domains_recursively(child, domains) unless child.terminal?
                end
                domains
            end

            def get_directory_option_recursively(node = self)
                top_level = elements.find{|e| e.respond_to?(:top_level_directive) && is_rule?(e.top_level_directive, 'options')}
                top_level and top_level.top_level_directive.options_statements.elements.find{|e| e.respond_to?(:directory_option)}.try(:directory_option)
            end
        }
    end

    rule top_level_directive
        (acl / controls / include_ / key / logging / lwres / masters / options / server / statistics_channels / trusted_keys /  managed_keys / view / zone ) {
        }
    end

    rule acl
        'acl' space acl_name space '{' space acl_statements space '}' space ';' {
        }
    end

    rule controls
        'controls' space '{' space controls_statements space '}' space ';' {
        }
    end

    rule include_
        'include' space filename space ';'
    end

    rule key
        'key' space key_name space '{' space key_statements space '}' space ';' {
        }
    end

    rule logging
        'logging' space '{' space logging_statements space '}' space ';' {
        }
    end

    rule lwres
        'lwres' space '{' space lwres_statements space '}' space ';' {
        }
    end

    rule masters
        'masters' space masters_name space '{' space masters_statements space '}' space ';' {
        }
    end

    rule options
        'options' space '{' space options_statements space '}' space ';' {
        }
    end

    rule server
        'server' space server_ipaddr ('/' ipaddr_prefix_length)? space '{' space server_statements space '}' space ';' {
        }
    end

    rule statistics_channels
        'statistics-channels' space '{' space statistics_channels_statements space '}' space ';' {
        }
    end

    rule trusted_keys
        'trusted-keys' space '{' space trusted_keys_statements space '}' space ';' {
        }
    end

    rule managed_keys
        'managed-keys' space '{' space managed_keys_statements space '}' space ';' {
        }
    end

    rule view
        'view' space view_name space dns_class? space '{' space view_statements space '}' space ';' {
            def view
                unless @view
                    @view              = View.new(:name => view_name.text_value.strip_quotes)
                    @view.domains      = get_domains_recursively
                    @view.clients      = view_statements.elements.find{|e| e.respond_to?(:match_clients)}.try(:match_clients).try(:to_s)
                    @view.destinations = view_statements.elements.find{|e| e.respond_to?(:match_destinations)}.try(:match_destinations).try(:to_s)
                end
                @view
            end

            private

            def get_domains_recursively(node = self, domains = Array.new)
                domains << node.domain(self.view) if node.respond_to?(:domain)
                node.elements.each do |child|
                    get_domains_recursively(child, domains) unless child.terminal?
                end
                domains
            end
        }
    end

    rule zone
        'zone' space zone_name space dns_class? space '{' space zone_statements space '}' space ';' {
            def domain(view = nil)
                # STDERR.puts "[INFO] calling 'zone' method of rule 'zone'"
                @domain ||= begin
                    name   = zone_name.text_value.strip_quotes
                    type   = zone_statements.elements.find{|zs| zs.respond_to?(:zone_type)}.try(:zone_type)
                    file   = zone_statements.elements.find{|zs| zs.respond_to?(:zone_file)}.try(:zone_file)
                    master = zone_statements.elements.find{|zs| zs.respond_to?(:zone_masters)}.try(:zone_masters)

                    if type == 'master'
                        directory_option = find_directory_in_parents
                        chroot_dir       = find_chroot_dir_in_parents
                        chroot_file_path = Pathname.new(file).absolute? ? File.join(chroot_dir, file) : File.join(chroot_dir, directory_option, file)
                        File.exists?(chroot_file_path) or raise Exception.new("[ERROR] zone file not found: \"#{chroot_file_path}\"")
                        zone_file        = Zonefile.from_file(chroot_file_path, name, chroot_dir, directory_option)

                        _domain = Domain.new(:name             => zone_file.origin,
                                             :view             => view,
                                             :authority_type   => Domain::MASTER,
                                             :ttl              => zone_file.ttl,
                                             :import_file_name => chroot_file_path)

                        _domain.soa_record = SOA.new(:name       => zone_file.soa[:origin],
                                                     :ttl        => zone_file.soa[:ttl],
                                                     :primary_ns => zone_file.soa[:primary],
                                                     :contact    => zone_file.soa[:email],
                                                     :serial     => zone_file.soa[:serial],
                                                     :refresh    => zone_file.soa[:refresh],
                                                     :retry      => zone_file.soa[:retry],
                                                     :expire     => zone_file.soa[:expire],
                                                     :minimum    => zone_file.soa[:minimumTTL])
                        puts "[Zonefile] parsing file #{chroot_file_path} (name: #{name}) (object_id: #{_domain.object_id}) (inspect: #{_domain.inspect})"
                        _domain.soa_record.serial = zone_file.soa[:serial]

                        zone_file.all_records.each do |record|
                            next if record[:type].upcase == 'SOA'
                            _domain.records << record[:type].constantize.new(:name    => record[:name],
                                                                             :ttl     => record[:ttl],
                                                                             :prio    => record[:pri],
                                                                             :content => record[:host])
                        end
                    else
                        _domain = Domain.new(:name             => name,
                                             :view             => view,
                                             :authority_type   => Domain::const_get(type.upcase),
                                             :master           => master,
                                             :import_file_name => chroot_file_path)
                    end

                    _domain
                end
            end

            def find_chroot_dir_in_parents
                p = parent
                while p
                    return p.chroot_dir if p.respond_to?(:chroot_dir)
                    p = p.parent
                end
                raise Exception.new('[ERROR] unable to find "chroot_dir" attribute on parent nodes')
            end

            def find_directory_in_parents
                @directory_option ||= begin
                    dir = nil
                    p   = parent
                    while p
                        if p.respond_to?(:directory_option)
                            dir = p.directory_option
                            break
                        end
                        p = p.parent
                    end
                    dir
                end
            end
        }
    end

    rule acl_name
        name
    end

    rule acl_statements
        statement* {
        }
    end

    rule controls_statements
        statement* {
        }
    end

    rule key_statements
        statement* {
        }
    end

    rule logging_statements
        statement* {
        }
    end

    rule lwres_statements
        statement* {
        }
    end

    rule masters_name
        name
    end

    rule masters_statements
        (ipaddr (space 'port' space port)? (space 'key' space key_name)? space ';' space)* {
            def to_s
                # hack: there may be multiple masters, but we only select the first
                # one as the DB currently expects a single IP addr value
                ipaddr = elements.select{|el| el.respond_to?(:ipaddr)}.collect{|el| el.ipaddr.text_value}.first
                port   = elements.select{|el| el.respond_to?(:port)  }.collect{|el| el.port.text_value}.first
                (port ? "#{ipaddr}/#{port}" : ipaddr)
            end
        }
    end

    rule options_statements
        (directory_statement / statement)* {
        }
    end

    rule directory_statement
        'directory' space filename space ';' {
            def directory_option
                filename.text_value.strip_quotes
            end
        }
    end

    rule server_ipaddr
        ipaddr
    end

    rule server_statements
        statement* {
        }
    end

    rule statistics_channels_statements
        statement* {
        }
    end

    rule trusted_keys_statements
        statement* {
        }
    end

    rule managed_keys_statements
        statement* {
        }
    end

    rule view_name
        name
    end

    rule dns_class
        ('IN' / 'in') {
            def to_s
                text_value
            end
        }
    end

    rule view_statements
        (match_clients space / match_destinations space / zone space / attach_cache_statement space)* {
        }
    end

    rule match_clients
        'match-clients' space '{' space (address_match ';' space)+ '}' space ';' {
            def to_s
                elements[4].elements.collect{|e| e.address_match.to_s}.join('; ')
            end
        }
    end

    rule match_destinations
        'match-destinations' space '{' space (address_match ';' space)+ '}' space ';' {
            def to_s
                elements[4].elements.collect{|e| e.address_match.to_s}.join('; ')
            end
        }
    end

    rule attach_cache_statement
        'attach-cache' space cache_name space ';'
    end

    rule cache_name
        name
    end

    rule zone_name
        name
    end

    rule zone_statements
        (zone_type_statement / zone_file_statement / zone_masters_statement / zone_allow_update_statement)* {
            def zone_str
                elements.collect(&:to_s).join(":")
            end
        }
    end

    rule zone_type_statement
        space 'type' space zone_type_value space ';' {
            def to_s
                "type #{zone_type_value}"
            end

            def zone_type
                zone_type_value.text_value.strip_quotes
            end
        }
    end

    rule zone_type_value
        ('slave' / 'master' / 'stub' / 'forward' / 'hint') {
            def to_s
                text_value
            end
        }
    end

    rule zone_file_statement
        space 'file' space filename space ';' {
            def to_s
                "file #{filename}"
            end

            def zone_file
                filename.text_value.strip_quotes
            end
        }
    end

    rule zone_masters_statement
        space 'masters' space '{' space masters_statements space '}' space ';' {
            def to_s
                "masters { #{masters_statements} }"
            end

            def zone_masters
                masters_statements.to_s.strip_quotes
            end
        }
    end

    rule zone_allow_update_statement
        space 'allow-update' space '{' space allow_update_values space '}' space ';' {
            def to_s
                "allow-update { #{allow_update_values} }"
            end
        }
    end

    rule allow_update_values
        (allow_update_value space ';' space)* {
            def to_s
                elements.collect{|el| el.allow_update_value}.join(' ')
            end
        }
    end

    rule allow_update_value
        ('any' / 'none' / '"' allow_update_value '"') {
            def to_s
                text_value
            end
        }
    end

    # ------------------------------------------------
    # ------------------ terminals -------------------

    rule space
        # comment / [\s]* {
        [\s]* {
            def inspect(indent = '')
                ''
            end

            def to_s
                ''
            end
        }
    end

    rule comment
        [\s]* '#' [^\r\n]* [\r\n] comment*
    end

    rule filename
        '"' [\w\.\/\-_]+ '"' {
            def to_s
                text_value
            end
        }
    end

    rule statement
        (space (name space)+ ';' space /
        space ((name space)+ '{' space statement* space '}' space)+ ';' space) {
        }
    end

    rule name
        (id / string / server_ipaddr ('/' ipaddr_prefix_length)?) {
            def to_s
                text_value
            end
        }
    end
    
    rule id
        [\w\-\.\/]+ {
            def to_s
                text_value
            end
        }
    end
    
    rule string
        '"' [^"]* '"' {
            def to_s
                text_value
            end
        }
    end

    rule ipaddr
        ipv4 / ipv6 {
            def to_s
                text_value
            end
        }
    end

    rule ipv4
        [\d] 1..3 '.' [\d] 1..3 '.' [\d] 1..3 '.' [\d] 1..3 {
            def to_s
                text_value
            end
        }
    end

    rule ipv6
        [\d:]+ {
            def to_s
                text_value
            end
        }
    end

    rule ipaddr_prefix_length
        [\d]+ {
            def to_s
                text_value
            end
        }
    end

    rule port
        [\d]+ {
            def to_s
                text_value
            end
        }
    end

    rule key_name
        ('"' [\w\.\/\-_]+ '"' / [\w\.\/\-_]) {
            def to_s
                text_value.strip_quotes
            end
        }
    end

    rule address_match
        ('!'? ipaddr ('/' ipaddr_prefix_length)? space / 'key' space key_name space / acl_name space / '{' space address_match+ space '}' space) {
            def to_s
                text_value
            end
        }
    end
end
